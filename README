Partition and Mount Disk
------------------------

    fdisk /dev/sdb # Your unmounted disk

o for new empty DOS partition table.
n for new partition.
t for changing partition type to 83.
b to set bootable flag.
p to print partition table and confirm changes.
w to write table to disk and exit.

    mkfs.ext4 /dev/sdb1
    mkdir -p /mnt/kiss
    mount /dev/sdb1 /mnt/kiss

UEFI users will need to use a GPT partition table.

Download and Verify Tarball
---------------------------

    ver=2021.7-9
    url=https://github.com/kisslinux/repo/releases/download/$ver
    file=kiss-chroot-$ver.tar.xz
    curl -fLO "$url/$file"
    curl -fLO "$url/$file.sha256"
    curl -fLO "$url/$file.asc"
    sha256sum -c < "$file.sha256"
    gpg --keyserver keyserver.ubuntu.com --recv-key 13295DAC2CF13B5C
    gpg --verify "$file.asc"

Unpack Tarball
--------------

    mkdir -p /mnt/kiss
    cd /mnt/kiss
    tar -xvf "$OLDPWD/$file"

Enter chroot
------------

    /mnt/kiss/bin/kiss-chroot /mnt/kiss

Clone Repositories
------------------

    mkdir -p /usr/local/repo
    cd /usr/local/repo
    git clone git://xhax0r.com/kiss .

Set KISS_PATH
-------------

Write to ~/.profile:

    export KISS_PATH=''
    KISS_PATH=/usr/local/repo
    KISS_PATH=$KISS_PATH:/usr/local/repo/core
    KISS_PATH=$KISS_PATH:/usr/local/repo/extra

Source ~/.profile in your shell:

    . ~/.profile

Enable Signature Verification
-----------------------------

    kiss build gnupg1
    gpg --keyserver keyserver.ubuntu.com --recv-key 13295DAC2CF13B5C
    gpg --keyserver hkps://keys.openpgp.org --recv-key A17A121ED99DAFCB
    echo trusted-key 0x13295DAC2CF13B5C >> /root/.gnupg/gpg.conf
    echo trusted-key 0xA17A121ED99DAFCB >> /root/.gnupg/gpg.conf
    cd /usr/local/repo
    git config merge.verifySignatures true

Rebuild the System
------------------

    export CFLAGS="-O2 -pipe -march=native"
    export CXXFLAGS="$CFLAGS"
    export MAKEFLAGS="-j$(nproc)"
    kiss update
    cd /var/db/kiss/installed && kiss build *

Download and Unpack Kernel and Firmware
--------------------------

    mkdir -p /usr/src
    cd /usr/src
    curl -fLO https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.12.10.tar.xz
    tar xvf linux-5.12.10.tar.xz
    cd linux-*
    curl -fLO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/snapshot/linux-firmware-20221012.tar.gz
    tar xvf linux-firmware-20221012.tar.gz
    mkdir -p /lib/firmware

Copy firmware you need to /lib/firmware if needed. Or copy all of it to play it safe (890M):

    cp -R linux-firmware-20221012/* /lib/firmware

AMD CPU/GPU users:

    cp -R linux-firmware-20221012/amd /lib/firmware
    cp -R linux-firmware-20221012/amd-ucode /lib/firmware
    cp -R linux-firmware-20221012/amdgpu /lib/firmware

Configure Kernel
----------------

    make mrproper
    make defconfig
    kiss b ncurses
    make menuconfig
    cp .config /boot/config

Ensure:

    CONFIG_IKHEADERS=n
    CONFIG_IKCONFIG=y
    CONFIG_IKCONFIG_PROC=y

AMD GPU users will want https://wiki.gentoo.org/wiki/AMDGPU.

Ensure everything is built in, not a module:

    sed -i 's/=m/=y/' .config

Installed Required Packages
---------------------------

    kiss b libelf

Fix compile issue:

    sed '/<stdlib.h>/a #include <linux/stddef.h>' tools/objtool/arch/x86/decode.c > _
    mv -f _ tools/objtool/arch/x86/decode.c

Remove perl dependency:

    patch -p1 < /usr/share/doc/kiss/wiki/kernel/no-perl.patch

Build and Install Kernel
------------------------

    make
    make install
    mv /boot/vmlinuz /boot/vmlinuz-5.12.10
    mv /boot/System.map /boot/System.map-5.12.10

Install Required Packages
-------------------------

    kiss b baseinit e2fsprogs dosfstools dhcpcd
    unset CFLAGS
    unset CXXFLAGS
    kiss b grub
    grub-install /dev/sdb # Your entire disk, not a partition
    grub-mkconfig -o /boot/grub/grub.cfg

Wifi users will need https://kisslinux.org/wiki/pkg/wpa_supplicant.
UEFI users will need https://kisslinux.org/wiki/pkg/efibootmgr.

Post Installation, Before Booting
-----------------

    passwd root
    adduser -h /home/USER -s /bin/sh USER
    printf '%s\n' HOSTNAME > /etc/hostname

Write to /etc/hosts:

    127.0.0.1  HOSTNAME  HOSTNAME
    ::1        HOSTNAME  HOSTNAME  ip6-localhost

Write to /etc/fstab:

   /dev/sdb1    /           ext4     defaults             1  1
   /dev/cdrom   /mnt/cdrom  auto     noauto,owner,ro      0  0
   proc         /proc       proc     nosuid,noexec,nodev  0  0
   sysfs        /sys        sysfs    nosuid,noexec,nodev  0  0
   devtmpfs     /dev        devtmpfs mode=0755,nosuid     0  0
   devpts       /dev/pts    devpts   gid=5,mode=620       0  0
   tmpfs        /tmp        tmpfs    nosuid,nodev,noatime 0  0

Write to /etc/profile:

    export PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin
    export LC_ALL="en_US.UTF-8"
    export LANG="$LC_ALL"
    export VISUAL="vi"
    export EDITOR="$VISUAL"
    export CFLAGS="-O2"
    export CXXFLAGS="$CFLAGS"
    export MAKEFLAGS="-j$(nproc)"

    # Set default umask.
    umask 022

    # Define foreground color variables
    P_BLACK="\[$(tput setaf 0)\]"
    P_RED="\[$(tput setaf 1)\]"
    P_GREEN="\[$(tput setaf 2)\]"
    P_YELLOW="\[$(tput setaf 3)\]"
    P_BLUE="\[$(tput setaf 4)\]"
    P_MAGNETA="\[$(tput setaf 5)\]"
    P_CYAN="\[$(tput setaf 6)\]"
    P_WHITE="\[$(tput setaf 7)\]"
    P_RESET="\[$(tput sgr0)\]"

    # Configure prompt
    export PS1="$P_GREEN\u$P_RED@$P_GREEN\h:$P_CYAN\w$P_WHITE\\$ $P_RESET"

    # Load profiles from /etc/profile.d
    for file in /etc/profile.d/*.sh; do
        [ -r "$file" ] && . "$file"
    done

    unset file

Boot into disk containing new system. Enjoy
